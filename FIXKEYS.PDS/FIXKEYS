/* --------------------  rexx procedure  -------------------- */
  ver = '1.6'
/* Name:      FixKeys                                         |
 |                                                            |
 | Function:  Fix PF Keys for all ISPF Profiles               |
 |                                                            |
 | Syntax:    %fixkeys                                        |
 |                                                            |
 | Usage Notes: Only works for ISPF Profiles that are         |
 |              active in the users ISPF Profile              |
 |                                                            |
 |              Calls FixKeysT with the profile applid        |
 |              to perform the update. Passes the update      |
 |              info on the call.                             |
 |                                                            |
 | Dependencies: none                                         |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |            Bruce Koss                                      |
 |                                                            |
 | History:  (most recent on top)                             |
 |       1.6  12/30/19 - Small update to tutorial panel       |
 |       1.5  01/30/19 - Add profile name to report           |
 |       1.4  01/29/19 - Check for SDSF Profile and change    |
 |                       RFINE to IFIND                       |
 |       1.3  01/28/19 - Check for SDSF Profile and change    |
 |                       RETREIEVE to CRETRIEVE               |
 |       1.2  01/28/19 - Clean up backup dsname               |
 |       1.1  01/27/19 - Add Final Report of Status           |
 |       1.0  01/25/19 - Add status pop and tutorial          |
 |                     - Numerous other fixes                 |
 |       0.1  01/24/19 - Creation                             |
 |                                                            |
 * ---------------------------------------------------------- */
  Address ISPExec

/* ------------------------------- *
 | Dynamically load the ISPF Panel |
 * ------------------------------- */
  load_info = loadispf()

/* --------------- *
 | Define Defaults |
 * --------------- */
  parse value '' with null dc mc sc
  rpt = 0
  sep = '\'

/* ------------------------ *
 | Display the prompt panel |
 * ------------------------ */
  do forever
    ok = 0
    'Display Panel(fixkey)'
    IF (RC = 08) then call done
    update = null
    call test_update k1 kv1
    call test_update k2 kv2
    call test_update k3 kv3
    call test_update k4 kv4
    call test_update k5 kv5
    call test_update k6 kv6
    call test_update k7 kv7
    call test_update k8 kv8
    if update /= null then
    leave
  end

/* -------------------------------------------------- *
 | Find the dsname of the active ISPF Profile Dataset |
 * -------------------------------------------------- */
  call outtrap 'k.'
  Address TSO ,
    'listalc sta'
  call outtrap 'off'
  do i = 1 to k.0
    if word(k.i,1) = 'ISPPROF' then leave
  end
  i = i - 1
  profile = "'"word(k.i,1)"'"
  drop k.

/* ----------------------------------------------- *
 | Backup PROFILE dataset                          |
 * ----------------------------------------------- */
  parse value time() with hh ":" MM ":" SS
  hlqtime  = "T"hh""mm
  hlqdate  = "D"substr(date("S"),3)
  profbkp  = strip(profile,,"'")
  profleng = length(profile)
  profbkp = strip(translate(profile,' ',"'."))
  profbkp = "'"profbkp".BK."hlqdate"."hlqtime"'"
  profbkp = translate(profbkp,'.',' ')
  x = listdsi(profile" DIRECTORY SMSINFO")
  recfmlen = length(sysrecfm)
  select
    when (recfmlen = 2) then
    recfm = substr(sysrecfm,1,1)" "substr(sysrecfm,2,1)
    when (recfmlen = 3) then
    recfm = substr(sysrecfm,1,1)" "substr(sysrecfm,2,1),
      substr(sysrecfm,3,1)
    otherwise
    recfm = recfm
  end

  call add_report  "FIXKEYS - ISPF Profile Update Utility - Version" ver
  call add_report ' '
  call add_report  "Updated Profile:" profile
  call add_report  "Backup dataset: " profbkp
  call add_report ' '

  if sysstorclass /= null then
  sc = 'StorClas('sysstorclass')'
  if sysdataclass /= null then
  dc = 'DataClas('sysdataclass')'
  if sysmgmtclass /= null then
  mc = 'MgmtClas('sysmgmtclass')'
  if datatype(sysadirblk) = "NUM" then
  dir = "DIR("sysadirblk")"
  else do
    "dsinfo dataset("profile")"
    dir = "DSNTYPE(LIBRARY,"ZDSDSNV")"
    if (ZDSNGEN <> 0) then
    dir = dir" MAXGENS("ZDSNGEN")"
  end
  ADDRESS TSO "ALLOC FI(FIXKEYS) DA("profbkp")",
    "NEW REUSE "sysunits" SPACE("sysprimary sysseconds")",
    sc mc dc "RECFM("recfm") DSORG("SYSDSORG") "dir,
    "LRECL("syslrecl") BLKSIZE("sysblksize")"
  ADDRESS TSO "FREE FI(FIXKEYS)"

  "lminit dataid(indd1) dataset("profile")"
  "lminit dataid(outdd1) dataset("profbkp")"
  "lmcopy fromid("indd1") todataid("outdd1")",
    "frommem(*) replace"
  "lmfree dataid("indd1")"
  "lmfree dataid("outdd1")"

/* ------------------------------------ *
 | Report Out the PF Keys being updated |
 * ------------------------------------ */
  test = update
  call add_report 'Changed PF Keys:'
  call add_report '  ' left('Key',8) center('Command',50)
  call add_report '  ' left('-',8,'-') center('-',50,'-')
  do until test = null
    parse value test with z1 z2 (sep) test
    call add_report '  ' left('PF' z1,8) z2
  end
  call add_report ' '
  call add_report 'Updated ISPF Profile Members:'

/* ----------------------------------------------- *
 | Now get all of the active PROFILE *PROF members |
 * ----------------------------------------------- */
  call outtrap 'k.'
  Address TSO ,
    'listd' profile 'mem'
  call outtrap 'off'
  do i = 7 to k.0
    if right(word(k.i,1),4) /= 'PROF' then iterate
    fixprof = word(k.i,1)
    if fixprof = 'ISPSPROF' then iterate
    msg1 = center("Updating ISPF profile member:",44)
    msg2 = center(fixprof,44)
    call add_report '   ' fixprof
    "addpop column(12) row(8)"
    "control display lock"
    "display panel(status)"
    "rempop"
    call Fix_Prof
  end

/* ----------------------------------------- *
 | Done with processing so free up and leave |
 * ----------------------------------------- */
Done:
  drc = rc
  rc = dropispf(load_info)
  if drc = 8 then exit 0
  report.0 = rpt
  fxk_dd = "C"random()
  Address TSO
  "Allocate File("fxk_dd") Reuse Unit(sysallda) Space(1 1)" ,
    "tracks Dsorg(ps) Recfm(f b) Lrecl(80)"
  "Execio * Diskw" fxk_dd "(Stem report. Finis)"
  Address ISPExec
  "LMinit Dataid(dataid) DDname("fxk_dd")"
  "Browse Dataid("dataid")"
  "LMfree Dataid("dataid")"
  Address TSO
  "Free File("fxk_dd")"
  Exit 0

Add_Report:
  parse arg text
  rpt = rpt + 1
  report.rpt = text
  return

/* --------------- *
 | Test PFK Update |
 * --------------- */
Test_Update:
  arg v1 v2
  if datatype(v1) /= 'NUM' then return null
  if v2 = null then return null
  update = update v1 v2 sep
  return

/* -------------------------- *
 | Fix up the profile PF Keys |
 * -------------------------- */
Fix_Prof:
  parse value fixprof with appl'PROF' .
  testlist = update
  if fixprof = 'ISFPROF' then
  do while testlist /= ''
    parse value testlist with xx test (sep) testlist
    if test = 'RETRIEVE' then
        call add_report left(' ',5) ,
             '>SDSF Profile Update - RETRIEVE replaced with CRETRIEV'
    if test = 'RFIND' then
        call add_report left(' ',5) ,
             '>SDSF Profile Update - RFIND replaced with IFIND'
     end
  'select cmd(%fixkeyst' update') newappl('appl')'
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    load_info = loadispf()                          *
 *            rc = dropispf(load_info)                        *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          rc = dropispf(load_info)                          *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            01/09/19 - Include DROPISPF routine             *
 *            08/29/17 - Fixup static values that were vars   *
 *            05/31/17 - Change default directory count       *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
      if libd = "ALTLIBC" then lib = "CLIST"
      else lib = "EXEC"
      Address TSO,
        "Altlib Deact Application("lib")"
    end
    else "libdef" libd
    address tso "free f("dd")"
  end
  return 0

>Start
>Panel fixkey
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(GREEN)
   !   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(BLUE)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
+-\-\(%FixKeys+)-\-\
%Command ===>_ZCMD
+
+ Enter the function keys to be updated (1 to 24) and the new value.
+
%   Key    Value
!  PF_k1+ _kv1                                                              +
!  PF_k2+ _kv2                                                              +
!  PF_k3+ _kv3                                                              +
!  PF_k4+ _kv4                                                              +
!  PF_k5+ _kv5                                                              +
!  PF_k6+ _kv6                                                              +
!  PF_k7+ _kv7                                                              +
!  PF_k8+ _kv8                                                              +
+
+ Press%PF3+to terminate,%ENTER+to process updates.
+
)INIT
 .Help = FixKeyT
)PROC
 ver (&k1,range,1,24)
 if (&k1 NE &Z)
    ver (&k1,range,1,24)
 if (&k2 NE &Z)
    ver (&k2,range,1,24)
 if (&k3 NE &Z)
    ver (&k3,range,1,24)
 if (&k4 NE &Z)
    ver (&k4,range,1,24)
 if (&k5 NE &Z)
    ver (&k5,range,1,24)
 if (&k6 NE &Z)
    ver (&k6,range,1,24)
 if (&k7 NE &Z)
    ver (&k7,range,1,24)
 if (&k8 NE &Z)
    ver (&k8,range,1,24)
)END
>Panel fixkeyt
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(GREEN)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
%Tutorial+-\-\-(%FixKeys+)-\-\-%Tutorial
%Command ===>_ZCMD
+
%FIXKEYS+will update from 1 to 8 Program Function Keys across ALL
+ISPF Profiles that are defined in the users ISPF Profile data set.
+
+In the%Key+field enter the Function Key number from 1 to 24.
+
+In the%Value+field enter the new Command to be executed when
+the Function Key is pressed.
+
+A backup of the ISPF profile dataset will be created prior to making
+the updates.
+
%Notes:+1. Will not affect products that use KEYLISTs
+       2. Does not affect profiles added after it is run
+           - so it may need to be run again
+       3. For the SDSF Profile change RETRIEVE to CRETRIEV
+          and RFIND to IFIND
+
+Press%F3+to return to the application.
+
)PROC
  &ZUP     = fixkeyt
  &ZCONT   = fixkeyt
)END
>Panel status
)ATTR DEFAULT(%+_)
)BODY WINDOW(47,4)
+
% &MSG1
% &MSG2
+
)INIT
  &ZWINTTL = &Z
)END
>end
